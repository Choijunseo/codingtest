def solution(name):
    alpha={'A':0, 'B':1, 'C':2, 'D':3, 'E':4, 'F':5, 'G':6, 'H':7, 'I':8, 'J':9, 'K':10, 'L':11, 'M':12, 'N':13, 'O':12, 'P':11, 'Q':10, 'R':9, 'S':8, 'T':7, 'U':6, 'V':5, 'W':4, 'X':3, 'Y':2, 'Z':1}
    if name =='A'*len(name):
        return 0
    if len(name)==1:
        return alpha[name[0]]
    temp=0
    for i in range(len(name)):
        if name[i] !='A':
            temp=i
            break
        if name[-i] !='A':
            temp=-i
            break
    print(i,alpha[name[temp]])
    if temp ==-1:
        return i+alpha[name[temp]]+solution('A'+name[:-1])
    else:
        return i+alpha[name[temp]]+solution('A'+name[temp+1:]+name[:temp])
        ///
        각 위치에서 제일 가까운 'A'가 아닌문자들을 바꿔주는 방식으로 재귀를 사용해 구현해 보았지만 정확도가 70퍼 정도로 맞는답이아니었다.
        어떤방식이 정말 그리디한 방식이며 어떻게 접근했어야했는지 아직 잘 모르겠다.
        def solution(name):
    answer = 0
    n = len(name)

    def alphabet_to_num(char):
        num_char = [i for i in range(14)] + [j for j in range(12, 0, -1)]
        return num_char[ord(char) - ord('A')]

    for ch in name:
        answer += alphabet_to_num(ch)

    move = n - 1
    for idx in range(n):
        next_idx = idx + 1
        while (next_idx < n) and (name[next_idx] == 'A'):
            next_idx += 1
        distance = min(idx, n - next_idx)
        move = min(move, idx + n - next_idx + distance)

    answer += move
    return answer
    ///
